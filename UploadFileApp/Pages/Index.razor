@page "/"
@using UploadFilesLibrary;
@using UploadFileApp.Data;

@inject IConfiguration _config;
@inject ISqlDataAccess _sql;

<PageTitle>Index</PageTitle>

<h1>Upload Demo</h1>

<EditForm Model="newCustomer" OnValidSubmit="SubmitForm">

    <div>
        <label for="firstName">First Name:</label>
        <InputText id="firstName" class="form-control" @bind-Value="newCustomer.FirstName"></InputText>
    </div>
    <div>
        <label for="lastName">Lastt Name:</label>
        <InputText id="lastName" class="form-control" @bind-Value="newCustomer.LastName"></InputText>
    </div>
    <div>
        <label for="profilePicture">Profile Picture:</label>
        <InputFile class="form-control" OnChange="LoadFile" accept=".pdf,.txt,.csv"></InputFile>
    </div>
    <button class="btn-primary mt-3" type="submit"> Create Customer</button>
</EditForm>


@if (errors.Count() > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@if (customers is not null)
{
    <h2>Existing Customers</h2>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>File</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.Id</td>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td> @if (string.IsNullOrEmpty(customer.FileName) == false)
                        {
                            
                            <embed src="@CreateFullPath(customer.FileName)" width="100" height="2100" />
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private long maxFileSize = 1024 * 1024 * 3; //represents 3MB size
    private List<string> errors = new();

    private CutstomerModel newCustomer = new CutstomerModel();
    private List<CutstomerModel> customers = new List<CutstomerModel>();
    private IBrowserFile? file;

    private async Task LoadCustomer()
    {
        customers = await _sql.LoadData<CutstomerModel>("dbo.Customer_GetAll", "Default", new { });
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomer();
    }

    private string CreateFullPath(string relativePath)
    {
        return Path.Combine(_config.GetValue<string>("WebStorageRoot")!, relativePath);
    }

    private async Task SubmitForm()
    {
        errors.Clear();

        try
        {
            string relativePath = await CaptureFile();
            newCustomer.FileName = relativePath;

            await _sql.SaveData("dbo.Customer_Insert", "Default", newCustomer);

            newCustomer = new();
            file = null;
            errors.Clear();

            await LoadCustomer();
        }
        catch (Exception e)
        {
            errors.Add($"Error: {e.Message}");
        }
    }

    private void LoadFile(InputFileChangeEventArgs e)
    {
        file = e.File;

    }


    private async Task<string> CaptureFile()
    {
        if (file is null)
        {

            return "";
        }

        try
        {
            string newFileName = Path.ChangeExtension(
            Path.GetRandomFileName(),
            Path.GetExtension(file.Name));

            string path = Path.Combine(_config.GetValue<string>("FileStorage")!, "dlavanchy", newFileName);

            string relativePath = Path.Combine("dlavanchy", newFileName);

            Directory.CreateDirectory(Path.Combine(Path.Combine(_config.GetValue<string>("FileStorage")!, "dlavanchy")));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            return relativePath;
        }
        catch (Exception ex)
        {
            errors.Add($"File{file.Name} Error: {ex.Message}");
            throw;
        }
    }
}
